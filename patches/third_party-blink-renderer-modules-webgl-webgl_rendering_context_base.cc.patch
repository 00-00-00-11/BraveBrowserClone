diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
index cfadc64a4ac0378079910887cc520aec939a0861..f18b5ecc93c1389e9bfb7b8c9f6eb1d362cbd92b 100644
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -27,6 +27,7 @@
 
 #include <memory>
 
+#include "brave/renderer/brave_content_settings_observer_helper.h"
 #include "build/build_config.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "gpu/config/gpu_feature_info.h"
@@ -2658,6 +2659,8 @@ WebGLActiveInfo* WebGLRenderingContextBase::getActiveAttrib(
     GLuint index) {
   if (isContextLost() || !ValidateWebGLObject("getActiveAttrib", program))
     return nullptr;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return nullptr;
   GLuint program_id = ObjectNonZero(program);
   GLint max_name_length = -1;
   ContextGL()->GetProgramiv(program_id, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
@@ -2688,6 +2691,8 @@ WebGLActiveInfo* WebGLRenderingContextBase::getActiveUniform(
     GLuint index) {
   if (isContextLost() || !ValidateWebGLObject("getActiveUniform", program))
     return nullptr;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return nullptr;
   GLuint program_id = ObjectNonZero(program);
   GLint max_name_length = -1;
   ContextGL()->GetProgramiv(program_id, GL_ACTIVE_UNIFORM_MAX_LENGTH,
@@ -2717,6 +2722,8 @@ Optional<HeapVector<Member<WebGLShader>>>
 WebGLRenderingContextBase::getAttachedShaders(WebGLProgram* program) {
   if (isContextLost() || !ValidateWebGLObject("getAttachedShaders", program))
     return WTF::nullopt;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return WTF::nullopt;
 
   HeapVector<Member<WebGLShader>> shader_objects;
   const GLenum kShaderType[] = {GL_VERTEX_SHADER, GL_FRAGMENT_SHADER};
@@ -2732,6 +2739,8 @@ GLint WebGLRenderingContextBase::getAttribLocation(WebGLProgram* program,
                                                    const String& name) {
   if (isContextLost() || !ValidateWebGLObject("getAttribLocation", program))
     return -1;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return -1;
   if (!ValidateLocationLength("getAttribLocation", name))
     return -1;
   if (!ValidateString("getAttribLocation", name))
@@ -2765,6 +2774,8 @@ ScriptValue WebGLRenderingContextBase::getBufferParameter(
     GLenum pname) {
   if (isContextLost() || !ValidateBufferTarget("getBufferParameter", target))
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
 
   switch (pname) {
     case GL_BUFFER_USAGE: {
@@ -2790,6 +2801,8 @@ void WebGLRenderingContextBase::getContextAttributes(
     Optional<WebGLContextAttributes>& result) {
   if (isContextLost())
     return;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return;
   result = ToWebGLContextAttributes(CreationAttributes());
   // Some requested attributes may not be honored, so we need to query the
   // underlying context/drawing buffer and adjust accordingly.
@@ -2857,6 +2870,13 @@ bool WebGLRenderingContextBase::ExtensionSupportedAndAllowed(
 ScriptValue WebGLRenderingContextBase::getExtension(ScriptState* script_state,
                                                     const String& name) {
   WebGLExtension* extension = nullptr;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame())) {
+    v8::Local<v8::Value> wrapped_extension =
+      ToV8(extension, script_state->GetContext()->Global(),
+          script_state->GetIsolate());
+
+    return ScriptValue(script_state, wrapped_extension);
+  }
 
   if (!isContextLost()) {
     for (size_t i = 0; i < extensions_.size(); ++i) {
@@ -2891,6 +2911,8 @@ ScriptValue WebGLRenderingContextBase::getFramebufferAttachmentParameter(
       !ValidateFramebufferFuncParameters("getFramebufferAttachmentParameter",
                                          target, attachment))
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
 
   if (!framebuffer_binding_ || !framebuffer_binding_->Object()) {
     SynthesizeGLError(GL_INVALID_OPERATION, "getFramebufferAttachmentParameter",
@@ -2973,6 +2995,8 @@ ScriptValue WebGLRenderingContextBase::getParameter(ScriptState* script_state,
                                                     GLenum pname) {
   if (isContextLost())
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   const int kIntZero = 0;
   switch (pname) {
     case GL_ACTIVE_TEXTURE:
@@ -3269,6 +3293,8 @@ ScriptValue WebGLRenderingContextBase::getProgramParameter(
     GLenum pname) {
   if (isContextLost() || !ValidateWebGLObject("getProgramParameter", program))
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
 
   GLint value = 0;
   switch (pname) {
@@ -3308,6 +3334,8 @@ ScriptValue WebGLRenderingContextBase::getProgramParameter(
 String WebGLRenderingContextBase::getProgramInfoLog(WebGLProgram* program) {
   if (isContextLost() || !ValidateWebGLObject("getProgramInfoLog", program))
     return String();
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return String();
   GLStringQuery query(ContextGL());
   return query.Run<GLStringQuery::ProgramInfoLog>(ObjectNonZero(program));
 }
@@ -3318,6 +3346,8 @@ ScriptValue WebGLRenderingContextBase::getRenderbufferParameter(
     GLenum pname) {
   if (isContextLost())
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   if (target != GL_RENDERBUFFER) {
     SynthesizeGLError(GL_INVALID_ENUM, "getRenderbufferParameter",
                       "invalid target");
@@ -3365,6 +3395,8 @@ ScriptValue WebGLRenderingContextBase::getShaderParameter(
     GLenum pname) {
   if (isContextLost() || !ValidateWebGLObject("getShaderParameter", shader))
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   GLint value = 0;
   switch (pname) {
     case GL_DELETE_STATUS:
@@ -3385,6 +3417,8 @@ ScriptValue WebGLRenderingContextBase::getShaderParameter(
 String WebGLRenderingContextBase::getShaderInfoLog(WebGLShader* shader) {
   if (isContextLost() || !ValidateWebGLObject("getShaderInfoLog", shader))
     return String();
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return String();
   GLStringQuery query(ContextGL());
   return query.Run<GLStringQuery::ShaderInfoLog>(ObjectNonZero(shader));
 }
@@ -3394,6 +3428,8 @@ WebGLShaderPrecisionFormat* WebGLRenderingContextBase::getShaderPrecisionFormat(
     GLenum precision_type) {
   if (isContextLost())
     return nullptr;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return nullptr;
   switch (shader_type) {
     case GL_VERTEX_SHADER:
     case GL_FRAGMENT_SHADER:
@@ -3427,12 +3463,16 @@ WebGLShaderPrecisionFormat* WebGLRenderingContextBase::getShaderPrecisionFormat(
 String WebGLRenderingContextBase::getShaderSource(WebGLShader* shader) {
   if (isContextLost() || !ValidateWebGLObject("getShaderSource", shader))
     return String();
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return String();
   return EnsureNotNull(shader->Source());
 }
 
 Optional<Vector<String>> WebGLRenderingContextBase::getSupportedExtensions() {
   if (isContextLost())
     return WTF::nullopt;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return WTF::nullopt;
 
   Vector<String> result;
 
@@ -3456,6 +3496,8 @@ ScriptValue WebGLRenderingContextBase::getTexParameter(
     GLenum pname) {
   if (isContextLost())
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   if (!ValidateTextureBinding("getTexParameter", target))
     return ScriptValue::CreateNull(script_state);
   switch (pname) {
@@ -3490,6 +3532,8 @@ ScriptValue WebGLRenderingContextBase::getUniform(
     const WebGLUniformLocation* uniform_location) {
   if (isContextLost() || !ValidateWebGLObject("getUniform", program))
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   DCHECK(uniform_location);
   if (uniform_location->Program() != program) {
     SynthesizeGLError(GL_INVALID_OPERATION, "getUniform",
@@ -3739,6 +3783,8 @@ WebGLUniformLocation* WebGLRenderingContextBase::getUniformLocation(
     const String& name) {
   if (isContextLost() || !ValidateWebGLObject("getUniformLocation", program))
     return nullptr;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return nullptr;
   if (!ValidateLocationLength("getUniformLocation", name))
     return nullptr;
   if (!ValidateString("getUniformLocation", name))
@@ -3763,6 +3809,8 @@ ScriptValue WebGLRenderingContextBase::getVertexAttrib(
     GLenum pname) {
   if (isContextLost())
     return ScriptValue::CreateNull(script_state);
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return ScriptValue::CreateNull(script_state);
   if (index >= max_vertex_attribs_) {
     SynthesizeGLError(GL_INVALID_VALUE, "getVertexAttrib",
                       "index out of range");
@@ -3840,6 +3888,8 @@ long long WebGLRenderingContextBase::getVertexAttribOffset(GLuint index,
                                                            GLenum pname) {
   if (isContextLost())
     return 0;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return 0;
   GLvoid* result = nullptr;
   // NOTE: If pname is ever a value that returns more than 1 element
   // this will corrupt memory.
@@ -4162,6 +4212,8 @@ void WebGLRenderingContextBase::ReadPixelsHelper(GLint x,
                                                  GLuint offset) {
   if (isContextLost())
     return;
+  if (canvas() && !AllowFingerprinting(canvas()->GetDocument().GetFrame()))
+    return;
   // Due to WebGL's same-origin restrictions, it is not possible to
   // taint the origin using the WebGL API.
   DCHECK(Host()->OriginClean());
